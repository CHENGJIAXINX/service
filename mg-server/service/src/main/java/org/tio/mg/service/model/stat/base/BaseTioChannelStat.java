package org.tio.mg.service.model.stat.base;

import org.tio.mg.service.jf.TioModel;
import org.tio.jfinal.plugin.activerecord.IBean;

/**
 * Generated by JFinal, do not modify this file.
 */
@SuppressWarnings("serial")
public abstract class BaseTioChannelStat<M extends BaseTioChannelStat<M>> extends TioModel<M> implements IBean {

	public void setId(java.lang.Long id) {
		set("id", id);
	}
	
	public java.lang.Long getId() {
		return getLong("id");
	}

	/**
	 * 用户id，可能是null
	 */
	public void setUid(java.lang.Integer uid) {
		set("uid", uid);
	}
	
	/**
	 * 用户id，可能是null
	 */
	public java.lang.Integer getUid() {
		return getInt("uid");
	}

	/**
	 * 应用类型：1：socket pc，2、socket android，3、socket ios
	 */
	public void setAppType(java.lang.Byte appType) {
		set("appType", appType);
	}
	
	/**
	 * 应用类型：1：socket pc，2、socket android，3、socket ios
	 */
	public java.lang.Byte getAppType() {
		return getByte("appType");
	}

	/**
	 * 统计的开始时间点
	 */
	public void setStart(java.util.Date start) {
		set("start", start);
	}
	
	/**
	 * 统计的开始时间点
	 */
	public java.util.Date getStart() {
		return get("start");
	}

	/**
	 * 统计的结束时间点
	 */
	public void setEnd(java.util.Date end) {
		set("end", end);
	}
	
	/**
	 * 统计的结束时间点
	 */
	public java.util.Date getEnd() {
		return get("end");
	}

	/**
	 * 时长，单位毫秒
	 */
	public void setDuration(java.lang.Long duration) {
		set("duration", duration);
	}
	
	/**
	 * 时长，单位毫秒
	 */
	public java.lang.Long getDuration() {
		return getLong("duration");
	}

	/**
	 * 形如：59分45秒717毫秒
	 */
	public void setFormatedDuration(java.lang.String formatedDuration) {
		set("formatedDuration", formatedDuration);
	}
	
	/**
	 * 形如：59分45秒717毫秒
	 */
	public java.lang.String getFormatedDuration() {
		return getStr("formatedDuration");
	}

	/**
	 * 服务器，可以是域名也可以是ip，配置文件中的my.ip
	 */
	public void setServer(java.lang.String server) {
		set("server", server);
	}
	
	/**
	 * 服务器，可以是域名也可以是ip，配置文件中的my.ip
	 */
	public java.lang.String getServer() {
		return getStr("server");
	}

	/**
	 * 服务器端口
	 */
	public void setServerPort(java.lang.Integer serverPort) {
		set("serverPort", serverPort);
	}
	
	/**
	 * 服务器端口
	 */
	public java.lang.Integer getServerPort() {
		return getInt("serverPort");
	}

	/**
	 * 客户端ip， 对应到ip表的id字段
	 */
	public void setIpid(java.lang.Integer ipid) {
		set("ipid", ipid);
	}
	
	/**
	 * 客户端ip， 对应到ip表的id字段
	 */
	public java.lang.Integer getIpid() {
		return getInt("ipid");
	}

	/**
	 * 客户端端口
	 */
	public void setPort(java.lang.Integer port) {
		set("port", port);
	}
	
	/**
	 * 客户端端口
	 */
	public java.lang.Integer getPort() {
		return getInt("port");
	}

	/**
	 * 本次通道已发送的字节数
	 */
	public void setSentBytes(java.lang.Long sentBytes) {
		set("sentBytes", sentBytes);
	}
	
	/**
	 * 本次通道已发送的字节数
	 */
	public java.lang.Long getSentBytes() {
		return getLong("sentBytes");
	}

	/**
	 * 本次通道已发送的packet数
	 */
	public void setSentPackets(java.lang.Long sentPackets) {
		set("sentPackets", sentPackets);
	}
	
	/**
	 * 本次通道已发送的packet数
	 */
	public java.lang.Long getSentPackets() {
		return getLong("sentPackets");
	}

	/**
	 * 本次通道已处理的字节数
	 */
	public void setHandledBytes(java.lang.Long handledBytes) {
		set("handledBytes", handledBytes);
	}
	
	/**
	 * 本次通道已处理的字节数
	 */
	public java.lang.Long getHandledBytes() {
		return getLong("handledBytes");
	}

	/**
	 * 本次通道已处理的packet数
	 */
	public void setHandledPackets(java.lang.Long handledPackets) {
		set("handledPackets", handledPackets);
	}
	
	/**
	 * 本次通道已处理的packet数
	 */
	public java.lang.Long getHandledPackets() {
		return getLong("handledPackets");
	}

	/**
	 * 本次通道已接收的字节数
	 */
	public void setReceivedBytes(java.lang.Long receivedBytes) {
		set("receivedBytes", receivedBytes);
	}
	
	/**
	 * 本次通道已接收的字节数
	 */
	public java.lang.Long getReceivedBytes() {
		return getLong("receivedBytes");
	}

	/**
	 * 本次通道已接收了多少次TCP数据包
	 */
	public void setReceivedTcps(java.lang.Long receivedTcps) {
		set("receivedTcps", receivedTcps);
	}
	
	/**
	 * 本次通道已接收了多少次TCP数据包
	 */
	public java.lang.Long getReceivedTcps() {
		return getLong("receivedTcps");
	}

	/**
	 * 本次通道已接收的packet数
	 */
	public void setReceivedPackets(java.lang.Long receivedPackets) {
		set("receivedPackets", receivedPackets);
	}
	
	/**
	 * 本次通道已接收的packet数
	 */
	public java.lang.Long getReceivedPackets() {
		return getLong("receivedPackets");
	}

	/**
	 * 平均每次TCP接收到的字节数，这个可以用来监控慢攻击，配置PacketsPerTcpReceive定位慢攻击
	 */
	public void setBytesPerTcpReceive(java.lang.Double bytesPerTcpReceive) {
		set("bytesPerTcpReceive", bytesPerTcpReceive);
	}
	
	/**
	 * 平均每次TCP接收到的字节数，这个可以用来监控慢攻击，配置PacketsPerTcpReceive定位慢攻击
	 */
	public java.lang.Double getBytesPerTcpReceive() {
		return getDouble("bytesPerTcpReceive");
	}

	/**
	 * 平均每次TCP接收到的业务包数，这个可以用来监控慢攻击，此值越小越有攻击嫌疑
	 */
	public void setPacketsPerTcpReceive(java.lang.Double packetsPerTcpReceive) {
		set("packetsPerTcpReceive", packetsPerTcpReceive);
	}
	
	/**
	 * 平均每次TCP接收到的业务包数，这个可以用来监控慢攻击，此值越小越有攻击嫌疑
	 */
	public java.lang.Double getPacketsPerTcpReceive() {
		return getDouble("packetsPerTcpReceive");
	}

}
