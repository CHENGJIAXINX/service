package org.tio.mg.service.model.conf.base;

import org.tio.mg.service.jf.TioModel;
import org.tio.jfinal.plugin.activerecord.IBean;

/**
 * Generated by JFinal, do not modify this file.
 */
@SuppressWarnings("serial")
public abstract class BaseHttpcache<M extends BaseHttpcache<M>> extends TioModel<M> implements IBean {

	public void setId(java.lang.Integer id) {
		set("id", id);
	}
	
	public java.lang.Integer getId() {
		return getInt("id");
	}

	/**
	 * 是否启动，1：启用，2：不启用
	 */
	public void setStatus(java.lang.Byte status) {
		set("status", status);
	}
	
	/**
	 * 是否启动，1：启用，2：不启用
	 */
	public java.lang.Byte getStatus() {
		return getByte("status");
	}

	/**
	 * 请求路径，形如:user/init
	 */
	public void setPath(java.lang.String path) {
		set("path", path);
	}
	
	/**
	 * 请求路径，形如:user/init
	 */
	public java.lang.String getPath() {
		return getStr("path");
	}

	/**
	 * 需要标识的请求参数名，形如: name,id
	 */
	public void setParams(java.lang.String params) {
		set("params", params);
	}
	
	/**
	 * 需要标识的请求参数名，形如: name,id
	 */
	public java.lang.String getParams() {
		return getStr("params");
	}

	/**
	 * 需要标识的cookie名，形如name1,name2,name3
	 */
	public void setCookies(java.lang.String cookies) {
		set("cookies", cookies);
	}
	
	/**
	 * 需要标识的cookie名，形如name1,name2,name3
	 */
	public java.lang.String getCookies() {
		return getStr("cookies");
	}

	/**
	 * 1：表示需要带上当前userid作为缓存的key ，null：表示不需要区分用户

像关注列表，此值就需要配上1，而像博客列表，就不需要配成1
	 */
	public void setUid(java.lang.Byte uid) {
		set("uid", uid);
	}
	
	/**
	 * 1：表示需要带上当前userid作为缓存的key ，null：表示不需要区分用户

像关注列表，此值就需要配上1，而像博客列表，就不需要配成1
	 */
	public java.lang.Byte getUid() {
		return getByte("uid");
	}

	/**
	 * 1：区分登录，其它值：不区分登录。当uid为1时，此值不管配什么都是1
	 */
	public void setLogin(java.lang.Byte login) {
		set("login", login);
	}
	
	/**
	 * 1：区分登录，其它值：不区分登录。当uid为1时，此值不管配什么都是1
	 */
	public java.lang.Byte getLogin() {
		return getByte("login");
	}

	/**
	 * 实现了HttpCacheMeta的类名
	 */
	public void setMetaclass(java.lang.String metaclass) {
		set("metaclass", metaclass);
	}
	
	/**
	 * 实现了HttpCacheMeta的类名
	 */
	public java.lang.String getMetaclass() {
		return getStr("metaclass");
	}

	/**
	 * 缓存过期时间，单位：秒 (从上次创建时计时)
	 */
	public void setExpireafterwrite(java.lang.Long expireafterwrite) {
		set("expireafterwrite", expireafterwrite);
	}
	
	/**
	 * 缓存过期时间，单位：秒 (从上次创建时计时)
	 */
	public java.lang.Long getExpireafterwrite() {
		return getLong("expireafterwrite");
	}

	/**
	 * 缓存过期时间，单位：秒(从上次被访问时计时，相当于会话)
	 */
	public void setExpireafteraccess(java.lang.Long expireafteraccess) {
		set("expireafteraccess", expireafteraccess);
	}
	
	/**
	 * 缓存过期时间，单位：秒(从上次被访问时计时，相当于会话)
	 */
	public java.lang.Long getExpireafteraccess() {
		return getLong("expireafteraccess");
	}

	/**
	 * 备注
	 */
	public void setRemark(java.lang.String remark) {
		set("remark", remark);
	}
	
	/**
	 * 备注
	 */
	public java.lang.String getRemark() {
		return getStr("remark");
	}

}
