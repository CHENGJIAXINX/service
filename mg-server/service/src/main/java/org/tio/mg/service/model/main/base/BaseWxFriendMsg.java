package org.tio.mg.service.model.main.base;

import org.tio.mg.service.jf.TioModel;
import org.tio.jfinal.plugin.activerecord.IBean;

/**
 * Generated by JFinal, do not modify this file.
 */
@SuppressWarnings("serial")
public abstract class BaseWxFriendMsg<M extends BaseWxFriendMsg<M>> extends TioModel<M> implements IBean {

	public void setId(java.lang.Long id) {
		set("id", id);
	}
	
	public java.lang.Long getId() {
		return getLong("id");
	}

	/**
	 * 模型：1：私聊；2：群聊
	 */
	public void setFrommode(java.lang.Byte frommode) {
		set("frommode", frommode);
	}
	
	/**
	 * 模型：1：私聊；2：群聊
	 */
	public java.lang.Byte getFrommode() {
		return getByte("frommode");
	}

	/**
	 * 转发消息来源
	 */
	public void setFrommsgid(java.lang.Long frommsgid) {
		set("frommsgid", frommsgid);
	}
	
	/**
	 * 转发消息来源
	 */
	public java.lang.Long getFrommsgid() {
		return getLong("frommsgid");
	}

	/**
	 * 聊天发起人，user表的id
	 */
	public void setUid(java.lang.Integer uid) {
		set("uid", uid);
	}
	
	/**
	 * 聊天发起人，user表的id
	 */
	public java.lang.Integer getUid() {
		return getInt("uid");
	}

	/**
	 * 聊天发起人的sessionid
	 */
	public void setSession(java.lang.String session) {
		set("session", session);
	}
	
	/**
	 * 聊天发起人的sessionid
	 */
	public java.lang.String getSession() {
		return getStr("session");
	}

	/**
	 * 私聊时，会有值，表示是和谁私聊。此值为null表示是群聊
	 */
	public void setTouid(java.lang.Integer touid) {
		set("touid", touid);
	}
	
	/**
	 * 私聊时，会有值，表示是和谁私聊。此值为null表示是群聊
	 */
	public java.lang.Integer getTouid() {
		return getInt("touid");
	}

	/**
	 * 私聊时，会有值，表示是和谁私聊。此值为null表示是群聊
	 */
	public void setTosession(java.lang.String tosession) {
		set("tosession", tosession);
	}
	
	/**
	 * 私聊时，会有值，表示是和谁私聊。此值为null表示是群聊
	 */
	public java.lang.String getTosession() {
		return getStr("tosession");
	}

	/**
	 * 反向发送标识(接收者触发发送)：1：是；2：否
	 */
	public void setReverseflag(java.lang.Byte reverseflag) {
		set("reverseflag", reverseflag);
	}
	
	/**
	 * 反向发送标识(接收者触发发送)：1：是；2：否
	 */
	public java.lang.Byte getReverseflag() {
		return getByte("reverseflag");
	}

	/**
	 * 归属单人的消息的用户
	 */
	public void setSigleuid(java.lang.Integer sigleuid) {
		set("sigleuid", sigleuid);
	}
	
	/**
	 * 归属单人的消息的用户
	 */
	public java.lang.Integer getSigleuid() {
		return getInt("sigleuid");
	}

	/**
	 * 是否是单通道消息：1：是；2：否
	 */
	public void setSigleflag(java.lang.Byte sigleflag) {
		set("sigleflag", sigleflag);
	}
	
	/**
	 * 是否是单通道消息：1：是；2：否
	 */
	public java.lang.Byte getSigleflag() {
		return getByte("sigleflag");
	}

	/**
	 * 聊天发起人所在的ip，ip_info的id字段
	 */
	public void setIpid(java.lang.Integer ipid) {
		set("ipid", ipid);
	}
	
	/**
	 * 聊天发起人所在的ip，ip_info的id字段
	 */
	public java.lang.Integer getIpid() {
		return getInt("ipid");
	}

	/**
	 * 主聊人员的设备类型（DeviceType），1：PC，2：安卓，3：IOS;99:系统自动
	 */
	public void setDevice(java.lang.Byte device) {
		set("device", device);
	}
	
	/**
	 * 主聊人员的设备类型（DeviceType），1：PC，2：安卓，3：IOS;99:系统自动
	 */
	public java.lang.Byte getDevice() {
		return getByte("device");
	}

	/**
	 * app版本号
	 */
	public void setAppversion(java.lang.String appversion) {
		set("appversion", appversion);
	}
	
	/**
	 * app版本号
	 */
	public java.lang.String getAppversion() {
		return getStr("appversion");
	}

	/**
	 * 聊天内容（原始内容）
	 */
	public void setText(java.lang.String text) {
		set("text", text);
	}
	
	/**
	 * 聊天内容（原始内容）
	 */
	public java.lang.String getText() {
		return getStr("text");
	}

	/**
	 * 源消息
	 */
	public void setSrctext(java.lang.String srctext) {
		set("srctext", srctext);
	}
	
	/**
	 * 源消息
	 */
	public java.lang.String getSrctext() {
		return getStr("srctext");
	}

	/**
	 * 操作者昵称
	 */
	public void setOpernick(java.lang.String opernick) {
		set("opernick", opernick);
	}
	
	/**
	 * 操作者昵称
	 */
	public java.lang.String getOpernick() {
		return getStr("opernick");
	}

	/**
	 * 系统消息体
	 */
	public void setSysmsgbody(java.lang.String sysmsgbody) {
		set("sysmsgbody", sysmsgbody);
	}
	
	/**
	 * 系统消息体
	 */
	public java.lang.String getSysmsgbody() {
		return getStr("sysmsgbody");
	}

	/**
	 * 发送者昵称列表
	 */
	public void setTonicks(java.lang.String tonicks) {
		set("tonicks", tonicks);
	}
	
	/**
	 * 发送者昵称列表
	 */
	public java.lang.String getTonicks() {
		return getStr("tonicks");
	}

	/**
	 * 缩略文字
	 */
	public void setResume(java.lang.String resume) {
		set("resume", resume);
	}
	
	/**
	 * 缩略文字
	 */
	public java.lang.String getResume() {
		return getStr("resume");
	}

	/**
	 * 聊天时间
	 */
	public void setTime(java.util.Date time) {
		set("time", time);
	}
	
	/**
	 * 聊天时间
	 */
	public java.util.Date getTime() {
		return get("time");
	}

	/**
	 * 该条消息是否由系统发出，譬如添加好友通知、评论通知等

1：是由系统发出的
2：非系统发出
	 */
	public void setSendbysys(java.lang.Byte sendbysys) {
		set("sendbysys", sendbysys);
	}
	
	/**
	 * 该条消息是否由系统发出，譬如添加好友通知、评论通知等

1：是由系统发出的
2：非系统发出
	 */
	public java.lang.Byte getSendbysys() {
		return getByte("sendbysys");
	}

	/**
	 * 消息类型：1：正常消息：2：操作消息
	 */
	public void setMsgtype(java.lang.Byte msgtype) {
		set("msgtype", msgtype);
	}
	
	/**
	 * 消息类型：1：正常消息：2：操作消息
	 */
	public java.lang.Byte getMsgtype() {
		return getByte("msgtype");
	}

	/**
	 * 操作码：1：删除聊天会话；2：拉黑；3：恢复拉黑
	 */
	public void setOper(java.lang.Byte oper) {
		set("oper", oper);
	}
	
	/**
	 * 操作码：1：删除聊天会话；2：拉黑；3：恢复拉黑
	 */
	public java.lang.Byte getOper() {
		return getByte("oper");
	}

	/**
	 * 内容类型，1、普通文本消息，2、超链接卡片消息，3、文件，4、音频，5、视频，6、图片，9、名片
	 */
	public void setContenttype(java.lang.Byte contenttype) {
		set("contenttype", contenttype);
	}
	
	/**
	 * 内容类型，1、普通文本消息，2、超链接卡片消息，3、文件，4、音频，5、视频，6、图片，9、名片
	 */
	public java.lang.Byte getContenttype() {
		return getByte("contenttype");
	}

	/**
	 * 这条消息的状态，1、正常、2、 自己撤回了，3、被管理员撤回
	 */
	public void setStatus(java.lang.Byte status) {
		set("status", status);
	}
	
	/**
	 * 这条消息的状态，1、正常、2、 自己撤回了，3、被管理员撤回
	 */
	public java.lang.Byte getStatus() {
		return getByte("status");
	}

	/**
	 * 已读标识。1：已读，2：未读
	 */
	public void setReadflag(java.lang.Byte readflag) {
		set("readflag", readflag);
	}
	
	/**
	 * 已读标识。1：已读，2：未读
	 */
	public java.lang.Byte getReadflag() {
		return getByte("readflag");
	}

	/**
	 * 对方阅读消息的时间
	 */
	public void setReadtime(java.util.Date readtime) {
		set("readtime", readtime);
	}
	
	/**
	 * 对方阅读消息的时间
	 */
	public java.util.Date getReadtime() {
		return get("readtime");
	}

	/**
	 * 主聊人员的设备类型（DeviceType），1：PC，2：安卓，3：IOS
	 */
	public void setReaddevice(java.lang.Byte readdevice) {
		set("readdevice", readdevice);
	}
	
	/**
	 * 主聊人员的设备类型（DeviceType），1：PC，2：安卓，3：IOS
	 */
	public java.lang.Byte getReaddevice() {
		return getByte("readdevice");
	}

	/**
	 * 对方阅读消息时，所在的ip，ip_info的id字段
	 */
	public void setReadipid(java.lang.Integer readipid) {
		set("readipid", readipid);
	}
	
	/**
	 * 对方阅读消息时，所在的ip，ip_info的id字段
	 */
	public java.lang.Integer getReadipid() {
		return getInt("readipid");
	}

	/**
	 * 私聊归属uid字符串，'大_小'
	 */
	public void setTwouid(java.lang.String twouid) {
		set("twouid", twouid);
	}
	
	/**
	 * 私聊归属uid字符串，'大_小'
	 */
	public java.lang.String getTwouid() {
		return getStr("twouid");
	}

	/**
	 * 操作的业务id
	 */
	public void setOperbizdata(java.lang.String operbizdata) {
		set("operbizdata", operbizdata);
	}
	
	/**
	 * 操作的业务id
	 */
	public java.lang.String getOperbizdata() {
		return getStr("operbizdata");
	}

	/**
	 * 记录创建时间
	 */
	public void setCreatetime(java.util.Date createtime) {
		set("createtime", createtime);
	}
	
	/**
	 * 记录创建时间
	 */
	public java.util.Date getCreatetime() {
		return get("createtime");
	}

	/**
	 * 该记录更新时间
	 */
	public void setUpdatetime(java.util.Date updatetime) {
		set("updatetime", updatetime);
	}
	
	/**
	 * 该记录更新时间
	 */
	public java.util.Date getUpdatetime() {
		return get("updatetime");
	}

}
